trigger: none

pool:
  name: 'Default'

parameters:
  - name: userEmail
    type: string
    default: ''
  - name: accountLicenseType
    type: string
    default: 'express' #basic as default
    values:
      - stakeholder
      - express
      - advanced
      - professional
      - enterprise 

variables:
  ADO_ORG: 'tejaraghumandala0'

steps:
- powershell: |
    if (-not "${{ parameters.userEmail }}") {
      Write-Error "User email is required."
      exit 1
    }

    $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$(ADO_PAT)"))
    $headers = @{
      Authorization = "Basic $auth"
      "Content-Type" = "application/json"
    }

    # Step 1: Check if the user already exists
    $existingUsersResponse = Invoke-RestMethod -Uri "https://vsaex.dev.azure.com/$(ADO_ORG)/_apis/userentitlements?api-version=7.1-preview.1" `
                                               -Method Get `
                                               -Headers $headers

    $userEmail = "${{ parameters.userEmail }}"
    $userExists = $false

    foreach ($user in $existingUsersResponse.members) {
      if ($user.user.principalName -eq $userEmail) {
        $userExists = $true
        break
      }
    }

    if ($userExists) {
      Write-Host "User '$userEmail' already exists in the organization. Skipping addition."
    } else {
      # Step 2: Proceed to add the user
      $body = @{
        accessLevel = @{
          accountLicenseType = "${{ parameters.accountLicenseType }}"
        }
        user = @{
          principalName = $userEmail
          subjectKind = "user"
        }
      } | ConvertTo-Json -Depth 3

      Write-Host "Adding user '$userEmail' to the organization..."

      try {
        $addResponse = Invoke-RestMethod -Uri "https://vsaex.dev.azure.com/$(ADO_ORG)/_apis/userentitlements?api-version=7.1-preview.1" `
                                         -Method Post `
                                         -Headers $headers `
                                         -Body $body
        Write-Host "User added successfully."
        Write-Output $addResponse | ConvertTo-Json -Depth 5
      }
      catch {
        Write-Error "Failed to add user: $($_.Exception.Message)"
        if ($_.ErrorDetails) {
          Write-Error $_.ErrorDetails.Message
        }
        exit 1
      }
    }
  displayName: 'Add user to Azure DevOps organization'
