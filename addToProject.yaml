trigger: none

pool:
  name: Default

parameters:
  - name: userEmail
    type: string
    default: ''
  - name: accountLicenseType
    type: string
    default: 'stakeholder'  # Options: stakeholder, express
  - name: projectName
    type: string
    default: 'Automation-1'             # e.g. "MyProject"
  - name: groupType
    type: string
    default: 'projectReader'  # Options: projectReader, projectContributor, projectAdministrator

variables:
  ADO_ORG: 'tejaraghumandala0'  # Change to your org name
  ADO_PAT: $(ADO_PAT)           # Set this as a secret variable in pipeline UI

steps:
- powershell: |
    # Validate inputs
    if (-not "${{ parameters.userEmail }}") {
      Write-Error "User email is required."
      exit 1
    }

    if (-not "${{ parameters.projectName }}") {
      Write-Error "Project name is required."
      exit 1
    }

    # Setup
    $org = "$(ADO_ORG)"
    $emailToCheck = "${{ parameters.userEmail }}"
    $licenseType = "${{ parameters.accountLicenseType }}"
    $projectName = "${{ parameters.projectName }}"
    $groupType = "${{ parameters.groupType }}"
    $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$(ADO_PAT)"))
    $headers = @{ Authorization = "Basic $auth" }

    # Step 1: Get Project ID
    $projectListUrl = "https://dev.azure.com/$org/_apis/projects?api-version=7.1-preview.4"
    Write-Host "Fetching project ID for '$projectName'..."
    $projectResponse = Invoke-RestMethod -Uri $projectListUrl -Method Get -Headers $headers
    $project = $projectResponse.value | Where-Object { $_.name -eq $projectName }

    if ($null -eq $project) {
      Write-Error "Project '$projectName' not found."
      exit 1
    }

    $projectId = $project.id
    Write-Host "Found Project ID: $projectId"

    # Step 2: Add user to organization and project
    $postUrl = "https://vsaex.dev.azure.com/$org/_apis/userentitlements?api-version=7.1-preview.1"

    $body = @{
      accessLevel = @{
        accountLicenseType = $licenseType
        licensingSource   = "account"
      }
      user = @{
        principalName = $emailToCheck
        subjectKind   = "user"
      }
      projectEntitlements = @(
        @{
          projectRef = @{
            id = $projectId
          }
          group = @{
            groupType = $groupType
          }
        }
      )
    } | ConvertTo-Json -Depth 10

    Write-Host "Adding user to organization and project..."
    try {
      $createResponse = Invoke-RestMethod -Uri $postUrl -Method Post -Headers $headers -Body $body
      Write-Host "User '$emailToCheck' successfully added to '$projectName' with groupType '$groupType' and license '$licenseType'."
    } catch { 
        Write-Error "Failed to add user to project: $_"
        exit 1  
    }
  displayName: 'Add User to Azure DevOps Project and Org'
